oldRNG<-getRNG()
setRNG("Mersenne-Twister",9,"Inversion")
resids_kalman <- read.csv("C:/Users/Robbie/Desktop/wolverines/data/Kalman_HQData_Residents.csv")
males <- resids_kalman[which(resids_kalman$NAME %in% c("Chewbacca", "Chance", "Rocky", "Logan", "Special-K")),]
females <- resids_kalman[which(resids_kalman$NAME %in% c("Eowyn", "Kendyl", "Mallory", "Mattie", "Melanie", "Sasha", "Xena")),]
males_combID <- as.factor(paste(males$NAME, males$year, sep=""))
females_combID <- as.factor(paste(females$NAME, females$year, sep=""))
males$ID <- as.numeric(males_combID)
females$ID <- as.numeric(females_combID)
data_for_crw_males <- males[,c("ID", "PSTDATE", "LAT", "LONG", "ErrorRadius")]
data_for_crw_males$posixdate <- as.POSIXct(data_for_crw_males$PSTDATE, format = "%m/%d/%Y %H:%M:%S")
data_for_crw_males$ln.sd.x <- log(data_for_crw_males$ErrorRadius/sqrt(2))
data_for_crw_males$ln.sd.y <- log(data_for_crw_males$ErrorRadius/sqrt(2))
data_for_crw_males$error.corr <- rep(0, nrow(data_for_crw_males))
data_for_crw_males <- data_for_crw_males[,c("ID", "posixdate", "LAT", "LONG", "ErrorRadius", "ln.sd.x", "ln.sd.y", "error.corr")]
data_for_crw_females <- females[,c("ID", "PSTDATE", "LAT", "LONG", "ErrorRadius")]
data_for_crw_females$posixdate <- as.POSIXct(data_for_crw_females$PSTDATE, format = "%m/%d/%Y %H:%M:%S")
data_for_crw_females$ln.sd.x <- log(data_for_crw_females$ErrorRadius/sqrt(2))
data_for_crw_females$ln.sd.y <- log(data_for_crw_females$ErrorRadius/sqrt(2))
data_for_crw_females$error.corr <- rep(0, nrow(data_for_crw_females))
data_for_crw_females <- data_for_crw_females[,c("ID", "posixdate", "LAT", "LONG", "ErrorRadius", "ln.sd.x", "ln.sd.y", "error.corr")]
coordinates(data_for_crw_males) <- c("LONG", "LAT")
proj4string(data_for_crw_males) <- CRS("+proj=longlat +datum=WGS84")
data_crw_utm_m <- spTransform(data_for_crw_males, CRS("+proj=utm +zone=10 +datum=NAD83 +units=m"))
crw_try <- as.data.frame(data_crw_utm_m)
crw_out6hr <- crawlWrap(obsData = crw_try, err.model=list(x= ~ ln.sd.x - 1, y =  ~ ln.sd.y - 1, rho =  ~ error.corr),Time.name = "posixdate", coord = c("LONG", "LAT"), initial.state=list(a=c(0,0,0,0),P = diag(c(5000 ^ 2, 10 * 3600 ^ 2, 5000 ^ 2, 10 * 3600 ^ 2))), theta=c(3,-1),fixPar=c(1,1,NA,NA), timeStep = "12 hours",control = list(maxit=10000,REPORT = 10, trace = 1),initialSANN = list(maxit = 2500),retryFits=0)
crw_out6hr <- crawlWrap(obsData = crw_try, err.model=list(x= ~ ln.sd.x - 1, y =  ~ ln.sd.y - 1, rho =  ~ error.corr),Time.name = "posixdate", coord = c("LONG", "LAT"), initial.state=list(a=c(0,0,0,0),P = diag(c(5000 ^ 2, 10 * 3600 ^ 2, 5000 ^ 2, 10 * 3600 ^ 2))), theta=c(3,-1),fixPar=c(1,1,NA,NA), timeStep = "6 hours",control = list(maxit=10000,REPORT = 10, trace = 1),initialSANN = list(maxit = 2500),retryFits=0)
nbStates <- 2
beta<-matrix(c(2,2),nrow=1,ncol=2,byrow=TRUE) # mlogit-scale transition probabilities (1-->2, 2-->1)
stepPar<-c(7000,3000,7000,3000)                           # step length; gamma distribution (mean1,mean2,sd1,sd2)
anglePar<-c(0,0.75,0,0.75)                            # turning angle; wrapped cauchy distribution (mean1,mean2,concentration1,concentration2)
dist<-list(step="gamma",angle="wrpcauchy")             # list providing data stream names and distributions
Par<-list(step=stepPar,angle=anglePar)
stepBounds <- matrix(c(0,Inf),2*nbStates,2,byrow=TRUE)                     # bounds for step length parameters
angleBounds <- matrix(c(-1,1),2*nbStates,2,byrow=TRUE)
singleFit12<-momentuHMM::MIfitHMM(crw_out6hr,nSims=1,ncores=1,nbStates=2,dist=dist,Par0=Par,beta0=beta,stateNames=c("Foraging", "Transit"),userBounds=list(step=stepBounds,angle=angleBounds),estAngleMean=list(angle=TRUE))
singleFit12 # When I get it to work, parameters make sense - even more sense than daily ones to tell the truth
library(jagsUI)
library(coda)
wkdir <- "C:/Users/Robbie/Desktop/wolverines/wolverinepractice"
setwd(wkdir)
source("pop_sim_and_detect_functions.R")
source("gis_practice.R") # Loads combined wolverine habitat suitability raster (1 = suitable, 0 = not)
stepPar <- matrix(c(5000,3000,7000,4000,7000,4000), nrow=3, byrow=T) # mean_1, mean_2, sd_1, sd_2, zeromass_1, zeromass_2
anglePar <- matrix(c(3,0.9,3,0.9,3,0.06),nrow=3, byrow=T) # mean_1, mean_2, concentration_1, concentration_2
stepDist <- "gamma"
angleDist <- "wrpcauchy"
betaPar <- matrix(c(2,2,2), nrow=3, ncol = 1, byrow=T)
set.seed(52353)
st <- proc.time()[3]
hab_model <- createWolverineTimeSeries(n_0=10,years=3,r=0.7, stepPars=stepPar,anglePars=anglePar,
betaPars=betaPar,stepDist,angleDist,bySex=T,spatial_cov=raster_out,nmoves=540)
et <- proc.time()[3]
et - st # run time (seconds)
rastergg <- data.frame(rasterToPoints(raster_out)) # raster_out is from gis_practice.R
names(rastergg) <- c("x","y","suit")
poly_out <- makeCameraGrid(raster_out, cell_area = 150000000)
nc_cameras <- getCameraPoints(poly_out,10,0)
obs_detects <- simDetectByDistance(poly_grid=poly_out,cameraPoints = nc_cameras,animal_occudata = hab_model,p=1,buffer=3000, time_to_switch=30)
d_itj <- array(0, dim=c(10,4,3))
obs_detects$site <- as.numeric(as.factor(obs_detects$camcell))
obs_detects$period <- as.numeric(cut(obs_detects$time, breaks=c(0,15,30,45,60)))
for(i in 1:10){
for(t in 1:4){
for(j in 1:3){
d_itj[i,t,j] <- sum(length(which(obs_detects$site==i & obs_detects$year==j & obs_detects$period==t)))
}
}
}
L <- array(15, dim=c(10,4,3))
setwd("C:/Users/Robbie/Desktop/wolverines/wolverinepractice/old_and_backup")
str(win.data <- list(L = L, d = d_itj, nsites = 10, ntimes = 4, nyears = 3))
cat(file = "dynocc_multiyear.txt", "
model{
# Fix this to do both occupancy (z) and use (u)!
# And remember z doesn't need to be indexed by period, just year
#Priors
# within years
int.psi ~ dunif(0,1)
eps.use ~ dunif(0,1)
gamm.use ~ dunif(0,1)
# between years
int.q ~ dunif(0,1)
eps.occ ~ dunif(0,1)
gamm.occ ~ dunif(0,1)
# not tied to a year or period
int.lambda ~ dgamma(0.001,0.001)
#Likelihood
for(i in 1:nsites){
# Year 1
z[i,1] ~ dbern(q[i,1])
logit(q[i,1]) <- logit(int.q)
u[i,1,1] ~ dbern(int.psi*z[i,1])
d[i,1,1] ~ dpois(u[i,1,1]*int.lambda*L[i,1,1])
for(t in 2:ntimes){
# Model for occurrence w/persistence
u[i,t,1] ~ dbern(psi[i,t,1]*z[i,1])
logit(psi[i,t,1]) <- logit(u[i,t-1,1]*(1-eps.use) + (1-u[i,t-1,1])*gamm.use)
# Observation model
d[i,t,1] ~ dpois(u[i,t,1]*int.lambda*L[i,t,1])
}
# Year 2
for(j in 2:nyears){
# Model for occurrence w/persistence
z[i,j] ~ dbern(q[i,j])
logit(q[i,j]) <- logit(z[i,j-1]*(1-eps.occ) + (1-z[i,j-1])*gamm.occ)
# Observation model
u[i,1,j] ~ dbern(int.psi*z[i,j])
d[i,1,j] ~ dpois(u[i,1,j]*int.lambda*L[i,1,j])
for(t in 2:ntimes){
# Model for use
u[i,t,j] ~ dbern(psi[i,t,j]*z[i,j])
logit(psi[i,t,j]) <- logit(u[i,t-1,j]*(1-eps.use) + (1-u[i,t-1,j])*gamm.use)
# Observation model
d[i,t,j] ~ dpois(u[i,t,j]*int.lambda*L[i,t,j])
}
}
}
# Derived quantities
#ave.use <- sum(u[,,])/(nsites*nyears*ntimes)
}
")
zinit <- matrix(0,nrow=10,ncol=3)
for (i in 1:10) {
for (j in 1:3) {
zinit[i, j] <- ifelse(sum(d_itj[i, , j]) > 0, 1, 0)
}
}
uinit <- array(0,dim=c(10,4,3))
for (i in 1:10) {
for(tee in 1:4){
for (j in 1:3) {
uinit[i, tee, j] <- ifelse(d_itj[i, tee, j] > 0, 1, 0)
}
}
}
inits <- function(){list(int.psi=runif(1),int.q=runif(1),int.lambda=rgamma(1,0.001,0.001),eps.use=runif(1),gamm.use=runif(1),eps.occ=runif(1),gamm.occ=runif(1),z=zinit,u=uinit)}
params <- c("int.psi", "eps.use", "gamm.use", "int.q", "eps.occ", "gamm.occ", "int.lambda")
ni <- 5000; nt <- 2; nb <- 2000; nc <- 3
out_multiyear <- jags(win.data, inits, params, "dynocc_multiyear.txt", n.chains=nc, n.iter=ni, n.burn=nb, n.thin=nt, parallel = TRUE, n.cores = 3)
cat(file = "dynocc_multiyear.txt", "
model{
# Fix this to do both occupancy (z) and use (u)!
# And remember z doesn't need to be indexed by period, just year
#Priors
# within years
int.psi ~ dunif(0,1)
eps.use ~ dunif(0,1)
gamm.use ~ dunif(0,1)
# between years
int.q ~ dunif(0,1)
eps.occ ~ dunif(0,1)
gamm.occ ~ dunif(0,1)
# not tied to a year or period
int.lambda ~ dgamma(0.001,0.001)
#Likelihood
for(i in 1:nsites){
# Year 1
z[i,1] ~ dbern(q[i,1])
logit(q[i,1]) <- logit(int.q)
u[i,1,1] ~ dbern(int.psi*z[i,1])
d[i,1,1] ~ dpois(u[i,1,1]*int.lambda*L[i,1,1])
for(t in 2:ntimes){
# Model for occurrence w/persistence
u[i,t,1] ~ dbern(psi[i,t,1]*z[i,1])
logit(psi[i,t,1]) <- logit(u[i,t-1,1]*(1-eps.use) + (1-u[i,t-1,1])*gamm.use)
# Observation model
d[i,t,1] ~ dpois(u[i,t,1]*int.lambda*L[i,t,1])
}
# Year 2
for(j in 2:nyears){
# Model for occurrence w/persistence
z[i,j] ~ dbern(q[i,j])
logit(q[i,j]) <- logit(z[i,j-1]*(1-eps.occ) + (1-z[i,j-1])*gamm.occ)
# Observation model
u[i,1,j] ~ dbern(u[i,4,j-1]*z[i,j])
d[i,1,j] ~ dpois(u[i,1,j]*int.lambda*L[i,1,j])
for(t in 2:ntimes){
# Model for use
u[i,t,j] ~ dbern(psi[i,t,j]*z[i,j])
logit(psi[i,t,j]) <- logit(u[i,t-1,j]*(1-eps.use) + (1-u[i,t-1,j])*gamm.use)
# Observation model
d[i,t,j] ~ dpois(u[i,t,j]*int.lambda*L[i,t,j])
}
}
}
# Derived quantities
#ave.use <- sum(u[,,])/(nsites*nyears*ntimes)
}
")
zinit <- matrix(0,nrow=10,ncol=3)
for (i in 1:10) {
for (j in 1:3) {
zinit[i, j] <- ifelse(sum(d_itj[i, , j]) > 0, 1, 0)
}
}
uinit <- array(0,dim=c(10,4,3))
for (i in 1:10) {
for(tee in 1:4){
for (j in 1:3) {
uinit[i, tee, j] <- ifelse(d_itj[i, tee, j] > 0, 1, 0)
}
}
}
inits <- function(){list(int.psi=runif(1),int.q=runif(1),int.lambda=rgamma(1,0.001,0.001),eps.use=runif(1),gamm.use=runif(1),eps.occ=runif(1),gamm.occ=runif(1),z=zinit,u=uinit)}
params <- c("int.psi", "eps.use", "gamm.use", "int.q", "eps.occ", "gamm.occ", "int.lambda")
ni <- 5000; nt <- 2; nb <- 2000; nc <- 3
out_multiyear <- jags(win.data, inits, params, "dynocc_multiyear.txt", n.chains=nc, n.iter=ni, n.burn=nb, n.thin=nt, parallel = TRUE, n.cores = 3)
?jags
out_multiyear <- jags(win.data, inits, params, "dynocc_multiyear.txt", n.chains=nc, n.iter=ni, n.burn=nb, n.thin=nt, parallel = TRUE, n.cores = 3,verbose=TRUE)
cat(file = "dynocc_multiyear.txt", "
model{
# Fix this to do both occupancy (z) and use (u)!
# And remember z doesn't need to be indexed by period, just year
#Priors
# within years
int.psi ~ dunif(0,1)
eps.use ~ dunif(0,1)
gamm.use ~ dunif(0,1)
# between years
int.q ~ dunif(0,1)
eps.occ ~ dunif(0,1)
gamm.occ ~ dunif(0,1)
# not tied to a year or period
int.lambda ~ dgamma(0.001,0.001)
#Likelihood
for(i in 1:nsites){
# Year 1
z[i,1] ~ dbern(q[i,1])
logit(q[i,1]) <- logit(int.q)
u[i,1,1] ~ dbern(int.psi*z[i,1])
d[i,1,1] ~ dpois(u[i,1,1]*int.lambda*L[i,1,1])
for(t in 2:ntimes){
# Model for occurrence w/persistence
u[i,t,1] ~ dbern(psi[i,t,1]*z[i,1])
logit(psi[i,t,1]) <- logit(u[i,t-1,1]*(1-eps.use) + (1-u[i,t-1,1])*gamm.use)
# Observation model
d[i,t,1] ~ dpois(u[i,t,1]*int.lambda*L[i,t,1])
}
# Year 2
for(j in 2:nyears){
# Model for occurrence w/persistence
z[i,j] ~ dbern(q[i,j])
logit(q[i,j]) <- logit(z[i,j-1]*(1-eps.occ) + (1-z[i,j-1])*gamm.occ)
# Observation model
u[i,1,j] ~ dbern(psi[i,1,j]*z[i,j])
logit(psi[i,1,j]) <- logit(u[i,4,j-1]*(1-eps.use) + (1-u[i,4,j-1])*gamm.use)
d[i,1,j] ~ dpois(u[i,1,j]*int.lambda*L[i,1,j])
for(t in 2:ntimes){
# Model for use
u[i,t,j] ~ dbern(psi[i,t,j]*z[i,j])
logit(psi[i,t,j]) <- logit(u[i,t-1,j]*(1-eps.use) + (1-u[i,t-1,j])*gamm.use)
# Observation model
d[i,t,j] ~ dpois(u[i,t,j]*int.lambda*L[i,t,j])
}
}
}
# Derived quantities
#ave.use <- sum(u[,,])/(nsites*nyears*ntimes)
}
")
zinit <- matrix(0,nrow=10,ncol=3)
for (i in 1:10) {
for (j in 1:3) {
zinit[i, j] <- ifelse(sum(d_itj[i, , j]) > 0, 1, 0)
}
}
uinit <- array(0,dim=c(10,4,3))
for (i in 1:10) {
for(tee in 1:4){
for (j in 1:3) {
uinit[i, tee, j] <- ifelse(d_itj[i, tee, j] > 0, 1, 0)
}
}
}
inits <- function(){list(int.psi=runif(1),int.q=runif(1),int.lambda=rgamma(1,0.001,0.001),eps.use=runif(1),gamm.use=runif(1),eps.occ=runif(1),gamm.occ=runif(1),z=zinit,u=uinit)}
params <- c("int.psi", "eps.use", "gamm.use", "int.q", "eps.occ", "gamm.occ", "int.lambda")
ni <- 5000; nt <- 2; nb <- 2000; nc <- 3
out_multiyear <- jags(win.data, inits, params, "dynocc_multiyear.txt", n.chains=nc, n.iter=ni, n.burn=nb, n.thin=nt, parallel = TRUE, n.cores = 3)
out_multiyear <- jags(win.data, inits, params, "dynocc_multiyear.txt", n.chains=nc, n.iter=ni, n.burn=nb, n.thin=nt, parallel = TRUE, n.cores = 3)
print(out_multiyear, dig=3) # Note: sometimes throws an error, sometimes doesn't? What's up with that?
out_multiyear <- jags(win.data, inits, params, "dynocc_multiyear.txt", n.chains=nc, n.iter=ni, n.burn=nb, n.thin=nt, parallel = TRUE, n.cores = 3)
out_multiyear <- jags(win.data, inits, params, "dynocc_multiyear.txt", n.chains=nc, n.iter=ni, n.burn=nb, n.thin=nt, parallel = TRUE, n.cores = 3)
out_multiyear <- jags(win.data, inits, params, "dynocc_multiyear.txt", n.chains=nc, n.iter=ni, n.burn=nb, n.thin=nt, parallel = TRUE, n.cores = 3)
uinit[8,3,1]
zinit[8,1]
uinit[8,2,1]
out_multiyear <- jags(win.data, inits, params, "dynocc_multiyear.txt", n.chains=nc, n.iter=ni, n.burn=nb, n.thin=nt, parallel = TRUE, n.cores = 3)
inits
inits()
jags
out_multiyear
str(out_multiyear)
out_multiyear <- jags(win.data, inits, params, "dynocc_multiyear.txt", n.chains=nc, n.iter=ni, n.burn=nb, n.thin=nt, parallel = TRUE, n.cores = 3,seed=1505141633)
out_multiyear
traceplot(out_multiyear)
install.packages("jsonlite")
install.packages("jsonlite")
wkdir <- "C:/Users/Robbie/Desktop/wolverines/QERMCollaborations"
setwd(wkdir)
library('jsonlite')
student_nodes <- read.table("student_nodes.csv", header=TRUE, sep=",",
stringsAsFactors=FALSE)
wkdir <- "C:/Users/Robbie/Desktop/wolverines/QERMCollaborations/data"
setwd(wkdir)
student_nodes <- read.table("student_nodes.csv", header=TRUE, sep=",",
stringsAsFactors=FALSE)
for(ii in c("methods", "collaborations", "ecosystems")){
nodes <- read.table(paste0(ii, "_nodes.csv"), header=TRUE, sep=",",
stringsAsFactors=FALSE)
links <- read.table(paste0(ii, "_links.csv"), header=TRUE, sep=",",
stringsAsFactors=FALSE)
## Merge the nodes for each file, test for missing data, and then
## create json and write to file.
nodes2 <- rbind(student_nodes, nodes)
which.missing.ids <-
which(!unique(unlist(links)) %in% unique(nodes2$id))
if(length(which.missing.ids)>0)
stop(paste(ii,"IDs in links not in nodes:",
paste0(unique(unlist(links))[which.missing.ids], collapse=', ')))
x <- c("{ \"nodes\":", toJSON(nodes2), ", \"links\":", toJSON(links), "}")
write(x, file=paste0(ii, '.json'))
}
setwd("C:/Users/Robbie/Desktop/wolverines/wolverinepractice/old_and_backup")
str(win.data <- list(L = L, d = d_itj, nsites = 10, ntimes = 4, nyears = 3))
cat(file = "dynocc_multiyear.txt", "
model{
# Fix this to do both occupancy (z) and use (u)!
# And remember z doesn't need to be indexed by period, just year
#Priors
# within years
int.psi ~ dunif(0,1)
eps.use ~ dunif(0,1)
gamm.use ~ dunif(0,1)
# between years
int.q ~ dunif(0,1)
eps.occ ~ dunif(0,1)
gamm.occ ~ dunif(0,1)
# not tied to a year or period
int.lambda ~ dgamma(0.001,0.001)
#Likelihood
for(i in 1:nsites){
# Year 1
z[i,1] ~ dbern(q[i,1])
logit(q[i,1]) <- logit(int.q)
u[i,1,1] ~ dbern(int.psi*z[i,1])
d[i,1,1] ~ dpois(u[i,1,1]*int.lambda*L[i,1,1])
for(t in 2:ntimes){
# Model for occurrence w/persistence
u[i,t,1] ~ dbern(psi[i,t,1]*z[i,1])
psi[i,t,1] <- u[i,t-1,1]*(1-eps.use) + (1-u[i,t-1,1])*gamm.use
# Observation model
d[i,t,1] ~ dpois(u[i,t,1]*int.lambda*L[i,t,1])
}
# Year 2
for(j in 2:nyears){
# Model for occurrence w/persistence
z[i,j] ~ dbern(q[i,j])
logit(q[i,j]) <- logit(z[i,j-1]*(1-eps.occ) + (1-z[i,j-1])*gamm.occ)
# Observation model
u[i,1,j] ~ dbern(psi[i,1,j]*z[i,j])
psi[i,1,j] <- u[i,4,j-1]*(1-eps.use) + (1-u[i,4,j-1])*gamm.use
d[i,1,j] ~ dpois(u[i,1,j]*int.lambda*L[i,1,j])
for(t in 2:ntimes){
# Model for use
u[i,t,j] ~ dbern(psi[i,t,j]*z[i,j])
psi[i,t,j] <- u[i,t-1,j]*(1-eps.use) + (1-u[i,t-1,j])*gamm.use
# Observation model
d[i,t,j] ~ dpois(u[i,t,j]*int.lambda*L[i,t,j])
}
}
}
# Derived quantities
#ave.use <- sum(u[,,])/(nsites*nyears*ntimes)
}
")
zinit <- matrix(0,nrow=10,ncol=3)
for (i in 1:10) {
for (j in 1:3) {
zinit[i, j] <- ifelse(sum(d_itj[i, , j]) > 0, 1, 0)
}
}
uinit <- array(0,dim=c(10,4,3))
for (i in 1:10) {
for(tee in 1:4){
for (j in 1:3) {
uinit[i, tee, j] <- ifelse(d_itj[i, tee, j] > 0, 1, 0)
}
}
}
inits <- function(){list(int.psi=runif(1),int.q=runif(1),int.lambda=rgamma(1,0.001,0.001),eps.use=runif(1),gamm.use=runif(1),eps.occ=runif(1),gamm.occ=runif(1),z=zinit,u=uinit)}
params <- c("int.psi", "eps.use", "gamm.use", "int.q", "eps.occ", "gamm.occ", "int.lambda")
ni <- 5000; nt <- 2; nb <- 2000; nc <- 3
out_multiyear <- jags(win.data, inits, params, "dynocc_multiyear.txt", n.chains=nc, n.iter=ni, n.burn=nb, n.thin=nt, parallel = TRUE, n.cores = 3)
library(jagsUI)
out_multiyear <- jags(win.data, inits, params, "dynocc_multiyear.txt", n.chains=nc, n.iter=ni, n.burn=nb, n.thin=nt, parallel = TRUE, n.cores = 3)
out_multiyear <- jags(win.data, inits, params, "dynocc_multiyear.txt", n.chains=nc, n.iter=ni, n.burn=nb, n.thin=nt, parallel = TRUE, n.cores = 3)
dbin(0,0,1)
dbinom(0,0,1)
dbinom(0,1,1)
dbinom(0,1,0)
logit(0)
cat(file = "dynocc_multiyear.txt", "
model{
# Fix this to do both occupancy (z) and use (u)!
# And remember z doesn't need to be indexed by period, just year
#Priors
# within years
int.psi ~ dunif(0,1)
eps.use ~ dunif(0.001,0.999)
gamm.use ~ dunif(0.001,0.999)
# between years
int.q ~ dunif(0,1)
eps.occ ~ dunif(0,1)
gamm.occ ~ dunif(0,1)
# not tied to a year or period
int.lambda ~ dgamma(0.001,0.001)
#Likelihood
for(i in 1:nsites){
# Year 1
z[i,1] ~ dbern(q[i,1])
logit(q[i,1]) <- logit(int.q)
u[i,1,1] ~ dbern(int.psi*z[i,1])
d[i,1,1] ~ dpois(u[i,1,1]*int.lambda*L[i,1,1])
for(t in 2:ntimes){
# Model for occurrence w/persistence
u[i,t,1] ~ dbern(psi[i,t,1]*z[i,1])
logit(psi[i,t,1]) <- logit(u[i,t-1,1]*(1-eps.use) + (1-u[i,t-1,1])*gamm.use)
# Observation model
d[i,t,1] ~ dpois(u[i,t,1]*int.lambda*L[i,t,1])
}
# Year 2
for(j in 2:nyears){
# Model for occurrence w/persistence
z[i,j] ~ dbern(q[i,j])
logit(q[i,j]) <- logit(z[i,j-1]*(1-eps.occ) + (1-z[i,j-1])*gamm.occ)
# Observation model
u[i,1,j] ~ dbern(psi[i,1,j]*z[i,j])
logit(psi[i,1,j]) <- logit(u[i,4,j-1]*(1-eps.use) + (1-u[i,4,j-1])*gamm.use)
d[i,1,j] ~ dpois(u[i,1,j]*int.lambda*L[i,1,j])
for(t in 2:ntimes){
# Model for use
u[i,t,j] ~ dbern(psi[i,t,j]*z[i,j])
logit(psi[i,t,j]) <- logit(u[i,t-1,j]*(1-eps.use) + (1-u[i,t-1,j])*gamm.use)
# Observation model
d[i,t,j] ~ dpois(u[i,t,j]*int.lambda*L[i,t,j])
}
}
}
# Derived quantities
#ave.use <- sum(u[,,])/(nsites*nyears*ntimes)
}
")
zinit <- matrix(0,nrow=10,ncol=3)
for (i in 1:10) {
for (j in 1:3) {
zinit[i, j] <- ifelse(sum(d_itj[i, , j]) > 0, 1, 0)
}
}
uinit <- array(0,dim=c(10,4,3))
for (i in 1:10) {
for(tee in 1:4){
for (j in 1:3) {
uinit[i, tee, j] <- ifelse(d_itj[i, tee, j] > 0, 1, 0)
}
}
}
inits <- function(){list(int.psi=runif(1),int.q=runif(1),int.lambda=rgamma(1,0.001,0.001),eps.use=runif(1,0.001,0.999),gamm.use=runif(1,0.001,0.999),eps.occ=runif(1),gamm.occ=runif(1),z=zinit,u=uinit)}
params <- c("int.psi", "eps.use", "gamm.use", "int.q", "eps.occ", "gamm.occ", "int.lambda")
ni <- 5000; nt <- 2; nb <- 2000; nc <- 3
out_multiyear <- jags(win.data, inits, params, "dynocc_multiyear.txt", n.chains=nc, n.iter=ni, n.burn=nb, n.thin=nt, parallel = TRUE, n.cores = 3)
curve(dgamma(x,0.001,0.001))
setwd("C:/Users/Robbie/Desktop/wolverines/QERMCollaborations/data")
library('jsonlite')
student_nodes <- read.table("student_nodes.csv", header=TRUE, sep=",",
stringsAsFactors=FALSE)
for(ii in c("methods", "collaborations", "ecosystems")){
nodes <- read.table(paste0(ii, "_nodes.csv"), header=TRUE, sep=",",
stringsAsFactors=FALSE)
links <- read.table(paste0(ii, "_links.csv"), header=TRUE, sep=",",
stringsAsFactors=FALSE)
## Merge the nodes for each file, test for missing data, and then
## create json and write to file.
nodes2 <- rbind(student_nodes, nodes)
which.missing.ids <-
which(!unique(unlist(links)) %in% unique(nodes2$id))
if(length(which.missing.ids)>0)
stop(paste(ii,"IDs in links not in nodes:",
paste0(unique(unlist(links))[which.missing.ids], collapse=', ')))
x <- c("{ \"nodes\":", toJSON(nodes2), ", \"links\":", toJSON(links), "}")
write(x, file=paste0(ii, '.json'))
}
setwd("C:/Users/Robbie/Desktop/wolverines/QERMCollaborations/data")
library('jsonlite')
student_nodes <- read.table("student_nodes.csv", header=TRUE, sep=",",
stringsAsFactors=FALSE)
for(ii in c("methods", "collaborations", "ecosystems")){
nodes <- read.table(paste0(ii, "_nodes.csv"), header=TRUE, sep=",",
stringsAsFactors=FALSE)
links <- read.table(paste0(ii, "_links.csv"), header=TRUE, sep=",",
stringsAsFactors=FALSE)
## Merge the nodes for each file, test for missing data, and then
## create json and write to file.
nodes2 <- rbind(student_nodes, nodes)
which.missing.ids <-
which(!unique(unlist(links)) %in% unique(nodes2$id))
if(length(which.missing.ids)>0)
stop(paste(ii,"IDs in links not in nodes:",
paste0(unique(unlist(links))[which.missing.ids], collapse=', ')))
x <- c("{ \"nodes\":", toJSON(nodes2), ", \"links\":", toJSON(links), "}")
write(x, file=paste0(ii, '.json'))
}
